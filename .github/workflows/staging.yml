# .github/workflows/staging.yml
name: Compile and push images

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: ["staging"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains two jobs, one for building client and the other for building server
  build-client:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # login with Docker
      - uses: docker/login-action@v1
        name: Login to Docker Hub
        with:
          # generate some credentials from Dockerhub and store them into the repo secrets
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # prepare buildx for docker
      - uses: docker/setup-buildx-action@v1
        name: Set up Docker Buildx

      # build and push the newly created client image
      - uses: docker/build-push-action@v2
        name: Build and push client image
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_CLIENT_IMAGE_NAME }}:latest

  build-server:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # login with Docker
      - uses: docker/login-action@v1
        name: Login to Docker Hub
        with:
          # generate some credentials from Dockerhub and store them into the repo secrets
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # prepare buildx for docker
      - uses: docker/setup-buildx-action@v1
        name: Set up Docker Buildx

      # build and push the newly created server image
      - uses: docker/build-push-action@v2
        name: Build and push server image
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_SERVER_IMAGE_NAME }}:latest

  call-webhook:
    runs-on: ubuntu-latest
    needs:
      - build-client
      - build-server
    steps:
      - name: Call Update Webhook
        if: ${{ success() }}
        run: |
          curl https://webhook.adleman6.wns.wilders.dev/hooks/update